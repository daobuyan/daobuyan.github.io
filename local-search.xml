<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>lab3 pgtbl</title>
    <link href="/2025/03/26/lab3-pgtbl/"/>
    <url>/2025/03/26/lab3-pgtbl/</url>
    
    <content type="html"><![CDATA[<h1 id="pte-print"><a href="#pte-print" class="headerlink" title="pte print"></a>pte print</h1><p>累计用时 2h  难度 easy</p><p>重要函数：</p><ul><li>freewalk</li><li>walk</li></ul><p>使用的宏：</p><ul><li>PTE2PA</li></ul><p>实际上关键是理解 freewalk 的代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">pagetable_t</span> pagetable;<br><span class="hljs-type">pte_t</span> pte = pagetable[<span class="hljs-built_in">PX</span>(level,va)];<br>pagetable = (<span class="hljs-type">void</span>*) <span class="hljs-built_in">PTE2PA</span>(pte); <span class="hljs-comment">// 找到对应的物理页面地址 ，该页面就是页表 使用（void*）转化为指针</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>techniques</category>
      
      <category>os</category>
      
    </categories>
    
    
    <tags>
      
      <tag>os</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>版本控制</title>
    <link href="/2025/03/26/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/"/>
    <url>/2025/03/26/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<h2 id="基本命令-流程"><a href="#基本命令-流程" class="headerlink" title="基本命令-流程"></a>基本命令-流程</h2><p>针对每个lab，创建一个对应的test分支<br>例如 util util_test</p><p>在test分支上进行每个作业的提交</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs stata">git add .<br>git commit -<span class="hljs-keyword">m</span> <span class="hljs-string">&quot;labX-XX&quot;</span><br><br>git checkout util<br>git <span class="hljs-keyword">merge</span> util_test  <span class="hljs-comment">// 这样的合并是 fast forward 合并 不会保留明确的历史记录 </span><br><br>git <span class="hljs-keyword">merge</span> --<span class="hljs-keyword">no</span>-ff util_test -<span class="hljs-keyword">m</span> <span class="hljs-string">&quot;合并信息&quot;</span> <span class="hljs-comment">//如果不加 -m 就会进入编辑器 得在第一行输入合并信息 ^+O 保存 -&gt; 输入合并信息文件名 -&gt; ^+X 退出</span><br><br><br>git push &lt;仓库&gt; &lt;util&gt;:&lt;util&gt;<br><br></code></pre></td></tr></table></figure><p>切换 lab</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs gauss">git fetch   <span class="hljs-meta"># 同步远程仓库，但不自动更新本地仓库 ，可以在本地看到remote的变化 再做决定是否要更新本地仓库 </span><br>            <span class="hljs-meta"># 如果是git pull 则会自动更新合并本地仓库</span><br>            <span class="hljs-meta"># 不想更新直接忽略即可</span><br>            <br>git checkout &lt;lab-branch-name&gt;<br><br><span class="hljs-built_in">make</span> clean<br><br></code></pre></td></tr></table></figure><p><code>git fetch 后的操作如下</code></p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">git log <span class="hljs-keyword">origin/main </span> <span class="hljs-comment"># 查看远程 main 分支的提交历史</span><br>git log HEAD..<span class="hljs-keyword">origin/main </span> <span class="hljs-comment"># 只看本地未拉取的远程提交（HEAD是本地当前分支的指针）</span><br><br>git <span class="hljs-keyword">diff </span>main <span class="hljs-keyword">origin/main </span> <span class="hljs-comment"># 比较本地 main 和远程 origin/main 的代码差异</span><br>git remote <span class="hljs-keyword">show </span><span class="hljs-keyword">origin </span> <span class="hljs-comment"># 显示远程仓库的详细信息（分支状态、跟踪关系等）</span><br><br>git fetch <span class="hljs-keyword">origin </span>        <span class="hljs-comment"># 下载远程更新</span><br>git merge <span class="hljs-keyword">origin/main </span>   <span class="hljs-comment"># 将远程 origin/main 合并到当前本地分支</span><br><br>git fetch <span class="hljs-keyword">origin</span><br><span class="hljs-keyword"></span>git rebase <span class="hljs-keyword">origin/main </span>  <span class="hljs-comment"># 将本地提交“变基”到远程更新之后（保持提交历史线性）</span><br><br></code></pre></td></tr></table></figure><p><code>merge  rebase</code>的区别</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs livescript">rebase 是变基 ，就是逐提交的将当前分支 的提交 “重放到” 变到的 分支 最新提交的后面<br><br>A -&gt; B -&gt; C  main       ---&gt;  A -&gt; B -&gt; C -&gt; D<span class="hljs-string">&#x27; -&gt; E&#x27;</span>  main<br>  <span class="hljs-string">\_</span> D -&gt; E  <span class="hljs-keyword">function</span>   ---&gt; <br><br>                     rebase <br><br>merge 则是产生一个合并节点<br><br>A -&gt; B -&gt; C  main       ---&gt;  A -&gt; B -&gt; C -&gt; F  main<br>  <span class="hljs-string">\_</span> D -&gt; E  <span class="hljs-keyword">function</span>   ---&gt;    <span class="hljs-string">\_</span> D -&gt; E _/    <span class="hljs-keyword">function</span><br><br>                     merge <br><br></code></pre></td></tr></table></figure><p>有时实验debug很久解决不了，需要对照下参考，此时可以使用<code>git stash</code></p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">git stash save <span class="hljs-string">&quot;修改的名字&quot;</span> <span class="hljs-comment"># stash是全局的 临时保存</span><br>                           <span class="hljs-comment"># 临时不是只能短时间内 ，而是与一般的add commit不同</span><br><br>git stash pop  <span class="hljs-comment"># 弹出最近压入的修改 --- 恢复该修改 ，并删除stash</span><br><br>git stash apply stash<span class="hljs-meta">@&#123;X&#125;</span>  <span class="hljs-comment"># 恢复指定的修改，保留stash</span><br><br>git stash list  <span class="hljs-comment"># 列出所有的stash</span><br><br>git stash drop stash<span class="hljs-meta">@&#123;X&#125;</span>  <span class="hljs-comment"># 删除指定的stash 不恢复</span><br><br>git stash clear  <span class="hljs-comment"># 清空所有的stash</span><br><br>git stash branch <span class="hljs-variable">&lt;new-branch-name&gt;</span> stash<span class="hljs-meta">@&#123;X&#125;</span>  <span class="hljs-comment"># 创建新分支 并应用指定的stash并删除</span><br><br><br></code></pre></td></tr></table></figure><h2 id="问题-疑惑"><a href="#问题-疑惑" class="headerlink" title="问题&amp;疑惑"></a>问题&amp;疑惑</h2><ol><li>为什么在合并后的文件中不需要重新commit？</li></ol><p>无冲突的情况下 ，要么实际是直接移动指针 ，要么就是会自动在合并后提交</p><p>​场景​是否需要手动提交？​原因<br>快进合并❌ 不需要Git 直接移动分支指针，无新提交。<br>无冲突的非快进合并❌ 不需要Git 自动生成合并提交（除非使用 –squash）。<br>合并冲突✅ 需要需手动解决冲突后提交。<br>使用 –no-commit✅ 需要强制 Git 暂停合并，允许检查或修改后手动提交。<br>合并后修改提交内容✅ 需要通过 git commit –amend 或新增提交补充内容。</p><ol start="2"><li>fast forward 是什么？</li></ol><p>fast forward 意味着直接移动指针 而不是生成合并提交</p><pre><code class="hljs">                second_brach                 |                 +            E &lt;- F            |            +</code></pre><p>A &lt;- B &lt;- C &lt;-  D<br>                +<br>                |<br>                target,HEAD</p><p><code>git merge second_branch</code> 的作用 会是如下效果（在目标分支target没有新的提交的时候）</p><p>A &lt;- B &lt;- C &lt;-  D &lt;- E &lt;- F<br>                          +<br>                          |<br>                          target,second_branch,HEAD</p><p>大写字母对应一次提交</p><ol start="3"><li>git merge 加上 –no-ff有什么作用？</li></ol><p>** –no-ff 的作用**</p><ul><li>​默认合并行为（无 –no-ff）​<br>​快进合并（Fast-Forward）​：<br>如果目标分支（例如 main）是待合并分支（例如 feature）的直接祖先（即没有其他提交干扰），Git 会直接移动 main 的指针到 feature 的最新提交，​不会生成合并提交。<br>​结果：分支历史保持线性，但丢失分支的存在痕迹。</li><li>​使用 –no-ff 后的行为<br>​强制生成合并提交：<br>即使可以快进，Git 也会创建一个新的合并提交，保留两个分支的历史记录。<br>​结果：分支历史中明确体现合并点，方便追踪分支的独立开发过程。</li></ul><ol start="4"><li>如果是target分支上，已经有了修改但是尚未暂存（add）没有提交（commit），那么直接git merge 会怎样？</li></ol><p>默认情况下：</p><ul><li>​拒绝合并<br>Git 会检测到工作目录或暂存区存在未提交的修改，并立即终止合并操作，提示错误信息：</li></ul><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs subunit"><span class="hljs-keyword">error: </span>Your local changes to the following files would be overwritten by merge:<br>    &lt;file-name&gt;<br>Please commit your changes or stash them before you merge.<br>Aborting<br></code></pre></td></tr></table></figure><p>​原因：Git 需要确保合并操作不会覆盖未保存的修改，否则可能导致数据丢失或冲突难以处理。</p><ul><li>​工作目录保持原状<br>你的未提交修改不会被清除，分支状态也不会改变，需手动处理这些改动。</li></ul><p>所以如果是有了修改就必须要么放弃修改，要么先提交</p><p>因此，<code>git merge</code>的前提是HEAD所在分支一定不能有任何的修改，即便未暂存的修改</p>]]></content>
    
    
    <categories>
      
      <category>techniques</category>
      
      <category>os</category>
      
    </categories>
    
    
    <tags>
      
      <tag>os</tag>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vim学习</title>
    <link href="/2025/03/09/vim%E5%AD%A6%E4%B9%A0/"/>
    <url>/2025/03/09/vim%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h1><p>看大佬的学习笔记：</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">https:</span>//wsdjeg.net/vim-galore-<span class="hljs-built_in">zh</span>-cn/<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>techniques</category>
      
      <category>vim</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>环境配置</title>
    <link href="/2025/03/07/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    <url>/2025/03/07/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="xv6-labs-2020"><a href="#xv6-labs-2020" class="headerlink" title="xv6-labs-2020"></a>xv6-labs-2020</h1><p>跟随的是卡哥星球上的指导，这里是对本项目的环境配置的一个记录，也对工具使用进行记录，以便查阅</p><h3 id="git"><a href="#git" class="headerlink" title="git"></a>git</h3><p>注意本项目的远程是有两个的：</p><ul><li>最开始的 origin 仓库，就是xv6-labs-2020的原始仓库</li><li>一个是自己代码提交的仓库，文档指引命名为 github</li></ul><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><code class="hljs pf"><span class="hljs-comment"># git 环境配置</span><br><br>git config --global <span class="hljs-keyword">user</span>.name <span class="hljs-string">&quot;XXXX&quot;</span>             <span class="hljs-comment"># 配置账户名</span><br>git config --global <span class="hljs-keyword">user</span>.email <span class="hljs-string">&quot;123@example.com&quot;</span> <span class="hljs-comment"># 配置邮箱</span><br><br><span class="hljs-comment"># 如果试图向仓库进行提交，一定要先设置 ssh </span><br><span class="hljs-comment"># 直接进行git push github util : util 会要求输密码</span><br><br><br><span class="hljs-comment"># 这里使用的是ED25519算法，也可以使用rsa版的</span><br><br>ssh-keygen -t ed25519 -C <span class="hljs-string">&quot;your_email@example.com&quot;</span> <span class="hljs-comment"># 生成密钥</span><br><br>cat ~/.ssh/id_ed25519.pub  <span class="hljs-comment"># 查看公钥内容</span><br><br>ssh -T git@github.com   <span class="hljs-comment"># 查看连接是否建立</span><br><br><br><span class="hljs-comment"># 配置信息处理</span><br>cat .git/config  <span class="hljs-comment"># 查看本地仓库的git配置文件</span><br><br><span class="hljs-comment"># 查看当前仓库的 Git 配置</span><br>git config --local --list<br><br><span class="hljs-comment"># 备份全局配置（默认在用户主目录）</span><br>cp ~/.gitconfig ~/.gitconfig.backup<br><br><span class="hljs-comment"># 清除全局用户名和邮箱（如果之前配置过）</span><br>git config --global --unset <span class="hljs-keyword">user</span>.name<br>git config --global --unset <span class="hljs-keyword">user</span>.email<br><br><span class="hljs-comment"># 清除 Git 凭据缓存（避免自动登录旧账号）</span><br>git config --global --unset credential.helper<br><br><br><span class="hljs-comment"># 删除旧的 origin 关联 </span><br>git remote remove origin<br><br><span class="hljs-comment"># 删除远程 dev 分支</span><br>git push origin --delete dev<br><br><span class="hljs-comment"># 重命名当前分支</span><br>git branch -m <span class="hljs-variable">&lt;new-branch-name&gt;</span>  <br><br><span class="hljs-comment"># 重命名目标分支（如将 old-branch 改为 new-branch）</span><br>git branch -m old-branch new-branch<br><br>git branch -a    <span class="hljs-comment"># 展示目前所有的分支 包括本地和远程 </span><br><br>git branch   <span class="hljs-comment"># 列出当前的分支 *标记当前分支</span><br><br>git status   <span class="hljs-comment"># 显示当前的仓库的状态  第一行包含当前分支信息</span><br><br>git clone http://仓库地址   <span class="hljs-comment"># 克隆仓库</span><br><br>git remote -v <span class="hljs-comment"># 查看远程主机名和仓库连接</span><br><br>git remote set-url <span class="hljs-variable">&lt;仓库名&gt;</span> <span class="hljs-variable">&lt;新url&gt;</span>  <span class="hljs-comment"># 重新设置仓库的远程地址</span><br><br>git remote add <span class="hljs-variable">&lt;自己取个远程主机名&gt;</span> <span class="hljs-variable">&lt;仓库地址&gt;</span>  <span class="hljs-comment"># 添加一个远程仓库</span><br><br>git push <span class="hljs-variable">&lt;远程主机名&gt;</span> <span class="hljs-variable">&lt;本地分支名&gt;</span> : <span class="hljs-variable">&lt;远程分支名&gt;</span> <span class="hljs-comment"># 这里的远程主机名是当时建立连接的时候自己取的   如果这里的分支名相同，则:及之后的可以省略</span><br><span class="hljs-comment"># 将本地仓库的修改push，推送到远程仓库</span><br><br><br>git checkout util <span class="hljs-comment"># 将分支切换到util </span><br><br><br>git branch <span class="hljs-variable">&lt;分支名&gt;</span>  <span class="hljs-comment"># 创建分支</span><br><br>git checkout -b <span class="hljs-variable">&lt;分支名&gt;</span>  <span class="hljs-comment">#创建分支并切换到该分支</span><br><br>git add .  <span class="hljs-comment"># 添加当前目录及子目录的所有修改</span><br><br>git add <span class="hljs-variable">&lt;filename1&gt;</span>  <span class="hljs-comment"># 精准添加单个文件，如果未跟踪将开始跟踪，且都转为暂存状态</span><br><br>git add <span class="hljs-variable">&lt;f1&gt;</span> <span class="hljs-variable">&lt;f2&gt;</span>  <span class="hljs-comment"># 精准添加多个文件</span><br><br>git add -A <span class="hljs-comment"># 添加整个仓库所有修改 ，包括删除操作</span><br><br>git add -p <span class="hljs-comment"># 逐个检查修改片段，选择是否添加</span><br><br>git rm <span class="hljs-variable">&lt;f1&gt;</span> <span class="hljs-comment"># 删除文件f1，取消跟踪</span><br><br>git rm --cache <span class="hljs-variable">&lt;f1&gt;</span> <span class="hljs-comment"># 保留文件，并取消跟踪</span><br><br>git init  <span class="hljs-comment"># 初始化仓库</span><br><br><br>git commit <span class="hljs-comment"># 提交修改，但是仍在本地  默认打包提交所有已暂存的所有内容  如果不跟名字，将会进入编辑器状态</span><br><br>git commit -m <span class="hljs-string">&quot;本次提交信息&quot;</span>  <span class="hljs-comment"># 直接在命令行中完成本次信息，无需进入编辑器</span><br><br>git commit -a -m <span class="hljs-string">&quot;信息&quot;</span>  <span class="hljs-comment"># 自动暂存所有**已跟踪文件**的修改，并提交  也就是自动完成了 git add 但是记得要先跟踪！！！</span><br><br>git merge <span class="hljs-variable">&lt;分支名1&gt;</span>  <span class="hljs-comment"># 合并当前head所在分支与该分支1</span><br><br><br>git push -u <span class="hljs-variable">&lt;主机名&gt;</span> <span class="hljs-variable">&lt;分支&gt;</span>   <span class="hljs-comment"># -u 会建立 追踪关系 ，让本地仓库和远程的&lt;origin&gt; 的main分支建立关系！！</span><br><br>git pull <span class="hljs-variable">&lt;主机名&gt;</span> <span class="hljs-variable">&lt;分支名&gt;</span>   <span class="hljs-comment"># 将 远程仓库的分支 拉取到仓库与当前分支合并  </span><br><br>git pull  <span class="hljs-comment"># 如果已经跟踪了仓库， 则直接拉取就行！！</span><br><br>git config --global core.editor   <span class="hljs-comment"># 查看当前git默认的编辑器，该代码有些情况下不生效</span><br><br><br>git rm --cached <span class="hljs-variable">&lt;your-file&gt;</span>  <span class="hljs-comment"># 移除仓库中（本地的）文件追踪但保留</span><br><br>.gitignore  <span class="hljs-comment"># 写.gitignore文件可以 让仓库中的某些文件不被上传 内容是放入 想要忽略的文件的路径（含文件）</span><br><br><br><br></code></pre></td></tr></table></figure><p>如果直接<code>git commit</code>会进入编辑器</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-comment"># 如果是vim</span><br>esc <span class="hljs-comment"># 先推出到查阅模式</span><br><br><span class="hljs-symbol">:wq</span> enter <span class="hljs-comment"># 键入后回车，这是保存再退出</span><br><br><span class="hljs-symbol">:q!</span> enter <span class="hljs-comment"># 放弃更改退出</span><br><br><br><span class="hljs-comment"># 如果是Nano</span><br><br><span class="hljs-title class_">CTRL</span> + O  <span class="hljs-comment"># 保存 并 编辑文件信息</span><br><br><span class="hljs-title class_">CTRL</span> + X  <span class="hljs-comment"># 退出</span><br><br><span class="hljs-title class_">CTRL</span> + X  N  <span class="hljs-comment"># 在保存时按N则不保存退出！</span><br><br><br><br><br></code></pre></td></tr></table></figure><h3 id="make"><a href="#make" class="headerlink" title="make"></a>make</h3><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs gauss"><span class="hljs-meta"># 再完成文件修改后，记得先将之前编译的文件先清理掉，再重新编译</span><br><br><span class="hljs-built_in">make</span> clean  <span class="hljs-meta"># 清楚之前的编译文件</span><br><br><br>ctrl + A  然后再按  X <br><br><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>techniques</category>
      
      <category>os</category>
      
    </categories>
    
    
    <tags>
      
      <tag>os</tag>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>20250307exec</title>
    <link href="/2025/03/07/20250307exec/"/>
    <url>/2025/03/07/20250307exec/</url>
    
    <content type="html"><![CDATA[<h1 id="今日完成"><a href="#今日完成" class="headerlink" title="今日完成"></a>今日完成</h1><ul><li><input disabled="" type="checkbox"> 完成Acwing算法基础课 动态规划一节课</li><li><input disabled="" type="checkbox"> 看下xv6本节实验的要求和具体内容</li><li><input disabled="" type="checkbox"> 雅思 50 个单词</li><li><input disabled="" type="checkbox"> 雅思英语100句翻译 10句</li></ul>]]></content>
    
    
    <categories>
      
      <category>plan &amp; exec</category>
      
      <category>exec</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计划</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>selenium脚本初始化</title>
    <link href="/2025/03/06/selenium%E8%84%9A%E6%9C%AC%E5%88%9D%E5%A7%8B%E5%8C%96/"/>
    <url>/2025/03/06/selenium%E8%84%9A%E6%9C%AC%E5%88%9D%E5%A7%8B%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h1 id="selenium-控制浏览器"><a href="#selenium-控制浏览器" class="headerlink" title="selenium 控制浏览器"></a>selenium 控制浏览器</h1><p>需要现在本地终端打开浏览器的调试模式</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 以Edge浏览器为例</span><br><span class="hljs-string">./msedge.exe</span>  <span class="hljs-string">--remote-debugging-port</span> <span class="hljs-string">=</span> <span class="hljs-number">9222</span><br><br><span class="hljs-comment"># 这里的端口号只要是没有被占用的都可以</span><br><span class="hljs-comment"># 注意需要在浏览器对应的目录下才可以</span><br><br><span class="hljs-string">netstat</span> <span class="hljs-string">-aon</span> <span class="hljs-string">|</span> <span class="hljs-attr">findstr :</span> <span class="hljs-number">9222</span><br><span class="hljs-comment"># 查看该端口是否被占用，占用会出现含listen的语句 </span><br></code></pre></td></tr></table></figure><p>然后在程序中执行以下代码，查看是否浏览器按预定执行</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">from</span> selenium <span class="hljs-keyword">import</span> webdriver<br><span class="hljs-keyword">from</span> seleniumwwebdriver.Edge.<span class="hljs-keyword">options</span> <span class="hljs-keyword">import</span> <span class="hljs-keyword">Options</span><br><br>web_option = <span class="hljs-keyword">Options</span>()<br>web_option.add_experimental_option(&quot;debuggerAddress&quot;, &quot;127.0.0.1 : 9222&quot;)<br><br>driver = webdriver.Edge(<span class="hljs-keyword">options</span> = web_option)<br>driver.<span class="hljs-keyword">get</span>(url)<br><br># &quot;执行体&quot;<br><br>driver.quit()<br><br></code></pre></td></tr></table></figure><p><em>以上代码，暂时无法在我的电脑本地执行成功，会出现两种报错：</em><br><em>“ target window already closed “ 错误</em><br><em>“ session not created ···  not reachable “ 错误</em></p>]]></content>
    
    
    <categories>
      
      <category>techniques</category>
      
      <category>python</category>
      
      <category>selenium</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>20250306exec</title>
    <link href="/2025/03/06/20250306exec/"/>
    <url>/2025/03/06/20250306exec/</url>
    
    <content type="html"><![CDATA[<h1 id="今日完成"><a href="#今日完成" class="headerlink" title="今日完成"></a>今日完成</h1><ul><li>博客配置设置</li><li>英语单词50</li><li>Acwing算法基础课 3个 算法</li><li>对简历进行了修改</li></ul><p>···</p>]]></content>
    
    
    <categories>
      
      <category>plan &amp; exec</category>
      
      <category>exec</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计划</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>三月计划</title>
    <link href="/2025/03/06/%E4%B8%89%E6%9C%88%E8%AE%A1%E5%88%92/"/>
    <url>/2025/03/06/%E4%B8%89%E6%9C%88%E8%AE%A1%E5%88%92/</url>
    
    <content type="html"><![CDATA[<h1 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h1><ul><li><input disabled="" type="checkbox"> 完成Acwing的算法基础课程+配套习题</li><li><input disabled="" type="checkbox"> 对模板进行重复记忆至脑中有清晰的思路</li></ul><h1 id="xv6实验"><a href="#xv6实验" class="headerlink" title="xv6实验"></a>xv6实验</h1><ul><li><input disabled="" type="checkbox"> 每2~3天完成一个lab，注意编写error文档和阅读文档</li></ul><h1 id="英语"><a href="#英语" class="headerlink" title="英语"></a>英语</h1><ul><li><input disabled="" type="checkbox"> 每天50个单词</li><li><input disabled="" type="checkbox"> 雅思写作书每天一个计划内容</li></ul>]]></content>
    
    
    <categories>
      
      <category>plan &amp; exec</category>
      
      <category>plan</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计划</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo + fluid 使用指南</title>
    <link href="/2025/03/03/%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/"/>
    <url>/2025/03/03/%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/</url>
    
    <content type="html"><![CDATA[<div class="note note-success">            <p>访问fluid用户手册：<br><code>https://hexo.fluid-dev.com/docs/guide/#%E5%85%B3%E4%BA%8E%E6%8C%87%E5%8D%97</code></p>          </div><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
