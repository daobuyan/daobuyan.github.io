<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Bellman-Ford算法</title>
    <link href="/2025/04/30/Bellman-Ford%E7%AE%97%E6%B3%95/"/>
    <url>/2025/04/30/Bellman-Ford%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="Bellman-Ford-算法"><a href="#Bellman-Ford-算法" class="headerlink" title="Bellman-Ford 算法"></a>Bellman-Ford 算法</h1><h2 id="算法模板"><a href="#算法模板" class="headerlink" title="算法模板"></a>算法模板</h2><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><br>- n次循环<br>    - 备份  <span class="hljs-comment"># 防止发生串联！</span><br>    - 遍历所有的边<br>        - <span class="hljs-keyword">dist[b] </span>= min(<span class="hljs-keyword">dist[b], </span><span class="hljs-keyword">dist[a] </span>+ w)   <span class="hljs-comment"># 这个就是松弛操作</span><br>    这里遍历边，对于边的存储可以随意，只要确保能遍历到每条边即可<br>    这里使用的struct&#123; int a, <span class="hljs-keyword">b, </span>w<span class="hljs-comment">;&#125;edge[M]; </span><br><br></code></pre></td></tr></table></figure><p>经过哦松弛操作后的所有的边必然满足三角不等式： dist[b] &lt;&#x3D; dist[a] + w</p><p>对于n次循环的作用：</p><p>循环k次意味着经过<strong>不超过k条边</strong>的最短路径被找到</p><p>如果第n次存在被更新的最短路径，那么就意味着存在n条边的最短路径，也就意味着这一路径上一定存在环！而且一定是负环</p><p>时间复杂度 为 O(n*m)</p><h2 id="QA"><a href="#QA" class="headerlink" title="QA"></a>QA</h2><ol><li>负环条件下是否找不到最短路径？</li></ol><p>不一定，如果负环不在最短路径上，那么就可以找到最短路径。</p><ol start="2"><li>适用于什么场景？</li></ol><p>允许存在负权边， 可能存在负权回路  且可以寻找边数限制的最短路径！！<br>SPFA则必须不存在负权回路！</p>]]></content>
    
    
    <categories>
      
      <category>algorithm</category>
      
    </categories>
    
    
    <tags>
      
      <tag>algorithm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>李沐深度学习环境配置</title>
    <link href="/2025/04/29/%E6%9D%8E%E6%B2%90%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    <url>/2025/04/29/%E6%9D%8E%E6%B2%90%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="深度学习环境配置"><a href="#深度学习环境配置" class="headerlink" title="深度学习环境配置"></a>深度学习环境配置</h1><h2 id="SSH密钥生成"><a href="#SSH密钥生成" class="headerlink" title="SSH密钥生成"></a>SSH密钥生成</h2><p>为了避免覆盖原有的密钥，得指定对应的保存路径</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-comment"># 生成密钥  但是我的不行</span><br>ssh-keygen -t ed25519 -C <span class="hljs-string">&quot;your_email<span class="hljs-variable">@example</span>.com&quot;</span> -f ~<span class="hljs-regexp">/.ssh/ali</span>yun_ubuntu_key<br><br><span class="hljs-comment"># 由于未知原因 得使用以下命令才不会导致No such file or directory</span><br>ssh-keygen -t ed25519 -C <span class="hljs-string">&quot;your_email<span class="hljs-variable">@example</span>.com&quot;</span> -f <span class="hljs-string">&quot;<span class="hljs-variable">$env</span>:USERPROFILE\.ssh\my_new_key&quot;</span><br><span class="hljs-comment"># $env:USERPROFILE 为环境变量</span><br><br><span class="hljs-comment"># 通过cat拿到密钥</span><br>cat <span class="hljs-string">&quot;<span class="hljs-variable">$env</span>:USERPROFILE\.ssh\my_new_key&quot;</span><br><br></code></pre></td></tr></table></figure><h2 id="在远端配置该密钥"><a href="#在远端配置该密钥" class="headerlink" title="在远端配置该密钥"></a>在远端配置该密钥</h2><p>在阿里云的控制台：</p><p>找到对应实例  最右侧的三个点（更多操作）-&gt; 绑定密钥对 -&gt; 创建密钥对 -&gt; 返回绑定密钥对，选择创建的密钥对 -&gt; 重启</p><h2 id="本地连接"><a href="#本地连接" class="headerlink" title="本地连接"></a>本地连接</h2><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gherkin"><span class="hljs-comment"># 在powershell 中键入</span><br>ssh -i <span class="hljs-string">&quot;&lt;私钥位置&gt;&quot;</span> root<span class="hljs-meta">@&lt;公网ip&gt;</span> <br><br></code></pre></td></tr></table></figure><p>注意这里是root不是ubuntu</p><p>在阿里云上的ubuntu最开始就只有root所以也只能先登录root这个与视频中的不一致</p><p>如果想要实现如视频中所示的ubuntu用户，只能自行创建，也最好自行创建，否在会在root下执行命令这是有风险的！</p><ul><li>[] 待修正</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 添加账户</span><br>adduser &lt;用户名&gt;<br><span class="hljs-comment"># 然后需要设置密码及一些个人信息</span><br><br>usermode -aG &lt;用户名&gt;<br><br><span class="hljs-built_in">mkdir</span> -p ~/.ssh<br>chmode 700 ~./ssh<br><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;&lt;公钥&gt;&quot;</span> &gt;&gt; authoriry_keys<br>chmode 600 authoriry_keys<br><br></code></pre></td></tr></table></figure><p>然后就可以通过指定私钥登录该普通用户了</p><p><code>ssh -i &quot;&lt;私钥&gt;&quot; ubuntu@&lt;公网ip&gt;</code></p><h2 id="退出"><a href="#退出" class="headerlink" title="退出"></a>退出</h2><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-comment"># 退出bash shell</span><br><span class="hljs-attribute">ctrl</span> + D<br><br><span class="hljs-comment"># 终止命令</span><br>ctrl + C<br><br></code></pre></td></tr></table></figure><h2 id="指定pip源"><a href="#指定pip源" class="headerlink" title="指定pip源"></a>指定pip源</h2><p>使用普通用户登陆后pip不再默认是阿里源，得自行指定</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gherkin"><span class="hljs-comment"># 使用-i指定参数</span><br><br>pip -i <span class="hljs-variable">&lt;源地址&gt;</span> <span class="hljs-variable">&lt;包&gt;</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>techniques</category>
      
      <category>deeplearning</category>
      
    </categories>
    
    
    <tags>
      
      <tag>deeplearning</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>dfs算法</title>
    <link href="/2025/04/29/dfs%E7%AE%97%E6%B3%95/"/>
    <url>/2025/04/29/dfs%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="dfs算法"><a href="#dfs算法" class="headerlink" title="dfs算法"></a>dfs算法</h1><p>深度优先搜索&#x2F;遍历都是使用递归进行</p><p>深度优先搜索，可能会对同一个元素进行多次访问，而后者一般只对元素进行一次访问</p><p>dfs有多种形式</p><p>acwing算法基础课的dfs he 力扣上的岛屿数量 就是不同类型</p><p>前者是一个图的形式，后者是网格类型，虽然也可以抽象为图</p><p>深度优先搜索一般会涉及到回溯<br>遍历就不需要考虑那么多，只需要一味的遍历访问</p><h2 id="算法模板"><a href="#算法模板" class="headerlink" title="算法模板"></a>算法模板</h2><p>dfs的模板没那么具体</p><p>根据需要可以对递归和处理的部分进行修改<br>例如 网格可以往四个方向行进就是递归访问四个部分！ </p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">处理当前的节点<br>递归<br><span class="hljs-bullet">- </span>访问a部分 <br><span class="hljs-bullet">- </span>访问b部分<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>algorithm</category>
      
    </categories>
    
    
    <tags>
      
      <tag>algorithm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>dijkstra算法</title>
    <link href="/2025/04/29/dijkstra%E7%AE%97%E6%B3%95/"/>
    <url>/2025/04/29/dijkstra%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="dijkstra算法"><a href="#dijkstra算法" class="headerlink" title="dijkstra算法"></a>dijkstra算法</h1><ul><li><input disabled="" type="checkbox"> 后续刷完图论算法后做个总结</li></ul><h2 id="基础算法模板"><a href="#基础算法模板" class="headerlink" title="基础算法模板"></a>基础算法模板</h2><ul><li><p>初始化距离<br>使用了邻接矩阵<br>使用了<code>g[][]</code> 和 <code>d[]</code> 分别记录 输入的两个点最短距离 和 最终 1号点到所有节点的最短距离<br>先初始化为一个比最大距离还大的数 <code>0x3f3f3f3f</code></p></li><li><p>n次循环 保证有n个节点被访问</p><ul><li>n次循环 遍历找出与 1 号点最近的未访问节点</li><li>将该点的状态修改为已经访问</li><li>n次循环 遍历更新与 1 号点的距离</li></ul></li></ul><p>判断是否为“无穷大” 是说明无法抵达 否则输出该距离</p><h2 id="堆优化算法"><a href="#堆优化算法" class="headerlink" title="堆优化算法"></a>堆优化算法</h2><p>对朴素版本的dijkstra可以得出在循环内的三个过程，时间复杂度分别为 O(n^2), O(n), O(m)</p><p>如果使用优先级队列- 堆，那么就可以降低其时间复杂度为 O(n), O(n), O(mlogn) (这里是稀疏图)</p><p>算法模板：<br>小根堆</p><ul><li>压入堆首节点</li><li>堆非空<ul><li>弹出堆顶</li><li>检查是否已经遍历</li><li>邻接表遍历其邻接点完成更新距离，并且压入堆更新后的距离（也就是说同一节点可能被多次压入，但是率先出堆的一定是小的那个！）</li></ul></li></ul><p>注意使用的是邻接表</p>]]></content>
    
    
    <categories>
      
      <category>algorithm</category>
      
    </categories>
    
    
    <tags>
      
      <tag>algorithm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>拓扑排序</title>
    <link href="/2025/04/29/%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F/"/>
    <url>/2025/04/29/%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="拓扑排序"><a href="#拓扑排序" class="headerlink" title="拓扑排序"></a>拓扑排序</h1><p>找到入度为0的点  acwing模板的写法</p><p>几个要点：</p><ul><li>存储方式是什么？邻接表还是邻接矩阵</li><li>使用什么数据结构来实现？栈、队列？</li><li>什么时候完成更新度数</li></ul><p>对弹出队列的元素遍历其邻接节点，对每个节点的度数-1</p><ul><li>需要完成的初始化有哪些？</li></ul><p>将所有的元素读入  并且初始化邻接表  </p>]]></content>
    
    
    <categories>
      
      <category>algorithm</category>
      
    </categories>
    
    
    <tags>
      
      <tag>algorithm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>递归算法</title>
    <link href="/2025/04/28/%E9%80%92%E5%BD%92%E7%AE%97%E6%B3%95/"/>
    <url>/2025/04/28/%E9%80%92%E5%BD%92%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="递归算法"><a href="#递归算法" class="headerlink" title="递归算法"></a>递归算法</h1><p>递归算法基本思考:</p><ul><li>函数体需要完成哪些内容？</li></ul><p>此时将函数看作已经完成，可以拿到其结果，需要对其进行哪些处理？<br>或者，进入递归前需要先进行什么预处理</p><ul><li>从哪开始递归？</li></ul><p>将从哪里调用本函数，进入递归</p><h1 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h1><p>leetcode 104</p>]]></content>
    
    
    <categories>
      
      <category>algorithm</category>
      
    </categories>
    
    
    <tags>
      
      <tag>algorithm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>双指针算法</title>
    <link href="/2025/04/28/%E5%8F%8C%E6%8C%87%E9%92%88%E7%AE%97%E6%B3%95/"/>
    <url>/2025/04/28/%E5%8F%8C%E6%8C%87%E9%92%88%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>双指针算法一般用来降低暴力算法的时间复杂度, 所以直接想到双指针在开始学习的时候比较难, 但是先想到暴力再进行双指针优化算法会更加容易点<br>往往双指针算法只需要O(n) 即在常数遍历下可以完成</p><p>双指针算法基本思考:</p><ul><li>什么时候更新指针?(两个都要想清楚)</li></ul><p>这是最重要的问题<br>一般而言, 都是一个指针 固定移动 使用for循环方式<br>另一个指针, 则是判断移动 只要满足某个条件就可以不断地移动</p><p>双指针的问题有很多, 得多注意数据的关系, 查看是否有单调性等性质, 否则只能遍历移动, 只是常数级别的优化</p><p>找到性质才可以有:<br>多重遍历 -&gt; 单重遍历(不回退)</p>]]></content>
    
    
    <categories>
      
      <category>algorithm</category>
      
    </categories>
    
    
    <tags>
      
      <tag>algorithm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>docker使用</title>
    <link href="/2025/04/17/docker%E4%BD%BF%E7%94%A8/"/>
    <url>/2025/04/17/docker%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="配置镜像网址"><a href="#配置镜像网址" class="headerlink" title="配置镜像网址"></a>配置镜像网址</h1><p>国内连接docker的速度比较慢，一般会使用国内的镜像网址。配置方法如下:</p><p>windows上直接打开docker desktop<br>在setting 中找到 docker engine 向其中添加配置信息：</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs fsharp"><span class="hljs-string">&quot;registry-mirrors&quot;</span><span class="hljs-operator">:</span> <span class="hljs-meta">[&lt;镜像网址&gt;]</span>  # 自行搜索最新的网址保证使用<br></code></pre></td></tr></table></figure><p>可以通过<code>docker info</code>查看自己docker的配置信息，找到 Registry Mirrors 即可知道是否成功配置</p><h1 id="docker常用命令"><a href="#docker常用命令" class="headerlink" title="docker常用命令"></a>docker常用命令</h1><h2 id="基本使用命令"><a href="#基本使用命令" class="headerlink" title="基本使用命令"></a>基本使用命令</h2><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs axapta">docker image pull &lt;reposition&gt;/&lt;image_name&gt;<br><br>docker image ls <br><br>docker <span class="hljs-built_in">container</span> run &lt;image_name&gt;  <span class="hljs-meta"># 具有自动抓取功能，本地没有就去默认仓库抓取pull </span><br>docker <span class="hljs-built_in">container</span> run --rm &lt;image_name&gt; <span class="hljs-meta"># 在运行结束后自动删除container</span><br><br>docker <span class="hljs-built_in">container</span> ls  <span class="hljs-meta"># 不会列出终止的容器</span><br>docker <span class="hljs-built_in">container</span> ls --all <span class="hljs-meta"># 列出包含终止但未删除的容器</span><br><br><span class="hljs-meta"># 有的容器在执行后会自动终止，但是有的不会，此时需要手动终止   【终止容器不会删除容器】</span><br>docker <span class="hljs-built_in">container</span> kill &lt;container_ID&gt;<br><br>docker <span class="hljs-built_in">container</span> rm &lt;container_ID&gt; <span class="hljs-meta"># 删除容器</span><br><br></code></pre></td></tr></table></figure><h2 id="生成image"><a href="#生成image" class="headerlink" title="生成image"></a>生成image</h2><p>制作自己的 image </p><ul><li>在项目的根目录下 编写 .dockerignore 文件直接写入需要忽略的文件或目录 大致方式与 .gitignore 类似</li><li>在项目的根目录下 新建一个Dockerfile文件</li></ul><p>Dockerfile 示例  来源于 &lt;阮一峰&gt;</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">FROM</span> node:<span class="hljs-number">8.4</span> ：该 image 文件继承官方的 node image，冒号表示标签，这里标签是<span class="hljs-number">8.4</span>，即<span class="hljs-number">8.4</span>版本的 node。<br><span class="hljs-keyword">COPY</span><span class="language-bash"> . /app ：将当前目录下的所有文件（除了.dockerignore排除的路径），都拷贝进入 image 文件的/app目录。</span><br><span class="hljs-keyword">WORKDIR</span><span class="language-bash"> /app ：指定接下来的工作路径为/app。</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> npm install ：在/app目录下，运行npm install命令安装依赖。注意，安装后所有的依赖，都将打包进入 image 文件。</span><br><span class="hljs-keyword">EXPOSE</span> <span class="hljs-number">3000</span> ：将容器 <span class="hljs-number">3000</span> 端口暴露出来， 允许外部连接这个端口。<br></code></pre></td></tr></table></figure><p>然后可以在中端执行</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs excel">docker <span class="hljs-built_in">image</span> build -<span class="hljs-built_in">t</span> koa-demo .        # -<span class="hljs-built_in">t</span> 指定<span class="hljs-built_in">image</span>名称<br># 或者<br>docker <span class="hljs-built_in">image</span> build -<span class="hljs-built_in">t</span> koa-de<span class="hljs-symbol">mo:0</span>.<span class="hljs-number">0.1</span> .  # 冒号指定标签<br></code></pre></td></tr></table></figure><h2 id="发布image"><a href="#发布image" class="headerlink" title="发布image"></a>发布image</h2><p>总体感觉和git异曲同工</p><ul><li>首先注册一个docker平台的账户</li><li>在本地进行信息配置</li></ul><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs pf">docker login  <span class="hljs-comment"># 登录docker</span><br><br>docker image <span class="hljs-keyword">tag</span> <span class="hljs-variable">&lt;image_name&gt;</span> <span class="hljs-variable">&lt;username&gt;</span>/<span class="hljs-variable">&lt;repository&gt;</span>:<span class="hljs-variable">&lt;tag&gt;</span>  <span class="hljs-comment"># 为image标注用户名和版本</span><br><br>docker image built -t <span class="hljs-variable">&lt;username&gt;</span>/<span class="hljs-variable">&lt;repository&gt;</span>:<span class="hljs-variable">&lt;tag&gt;</span> <span class="hljs-comment"># 也可以直接重构image</span><br><br>docker image push <span class="hljs-variable">&lt;username&gt;</span>/<span class="hljs-variable">&lt;repository&gt;</span>:<span class="hljs-variable">&lt;tag&gt;</span> <span class="hljs-comment"># 推送image到远程</span><br><br></code></pre></td></tr></table></figure><h2 id="进阶命令"><a href="#进阶命令" class="headerlink" title="进阶命令"></a>进阶命令</h2><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">docker container start <span class="hljs-variable">&lt;container_ID&gt;</span>  <span class="hljs-comment"># 重用某个容器</span><br><br>docker container logs <span class="hljs-variable">&lt;container_ID&gt;</span>  <span class="hljs-comment"># 当运行的时候没有加入-it参数就需要在运行后使用该命令查看输出 也就是容器内的shell输出</span><br><br>docker container exec -it <span class="hljs-variable">&lt;container_ID&gt;</span> <span class="hljs-comment"># 运行时没有使用-it 就需要用该指令进入正在运行的container</span><br><br>docker container cp <span class="hljs-variable">&lt;container_ID&gt;</span>: <span class="hljs-variable">&lt;本机路径&gt;</span>  <span class="hljs-comment"># 将正在运行的container的文件拷贝到本机</span><br><br>docker container stop <span class="hljs-variable">&lt;container_ID&gt;</span> <span class="hljs-comment"># 留出一个给其收尾工作的时间间隔再终止，但不一定进行了收尾工作</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>techniques</category>
      
      <category>docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>算法刷题记录</title>
    <link href="/2025/04/16/%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
    <url>/2025/04/16/%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h1 id="Acwing"><a href="#Acwing" class="headerlink" title="Acwing"></a>Acwing</h1><h2 id="Acwing-算法基础课"><a href="#Acwing-算法基础课" class="headerlink" title="Acwing 算法基础课"></a>Acwing 算法基础课</h2><p>二刷ing</p><p>第一章 √</p><p>第二章 √</p><p>第三章</p><p>第四章</p><p>第五章</p><p>第六章</p><h1 id="leetcode"><a href="#leetcode" class="headerlink" title="leetcode"></a>leetcode</h1><p>代码随想录 68</p><p>Hot 100  14</p><h1 id="洛谷"><a href="#洛谷" class="headerlink" title="洛谷"></a>洛谷</h1>]]></content>
    
    
    <categories>
      
      <category>techniques</category>
      
      <category>algorithm</category>
      
    </categories>
    
    
    <tags>
      
      <tag>algorithm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>内存池</title>
    <link href="/2025/04/15/%E5%86%85%E5%AD%98%E6%B1%A0/"/>
    <url>/2025/04/15/%E5%86%85%E5%AD%98%E6%B1%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="内存池"><a href="#内存池" class="headerlink" title="内存池"></a>内存池</h1><h3 id="时间"><a href="#时间" class="headerlink" title="时间"></a>时间</h3><p>5h * 6</p><h2 id="v1"><a href="#v1" class="headerlink" title="v1"></a>v1</h2><p>使用哈希表固定大小的进行分配内存<br><img src="/../images/memorypoolv1.png" alt="版本1"></p><p>关键数据结构</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs abnf">struct Slot<br>&#123;<br>    Slot* next<span class="hljs-comment">;</span><br>&#125;<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>HashBucket类的主要数据结构是memorypool的数组，也就是每个桶对应一个memorypool，其blocksize均为4KB，而slotsize则不同，<br>哈希索引会选择不同的桶，去寻找其freelist是否有内存，不够则进行申请allocateNewblock()</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">MemoryPool::allocateNewBlock</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-type">void</span>* newblock = <span class="hljs-keyword">operator</span> <span class="hljs-built_in">new</span>(Blocksize_);   <span class="hljs-comment">// 通过new实现</span><br>        <span class="hljs-built_in">reinterpret_cast</span>&lt;Slot*&gt;(newblock)-&gt;next = firstSlot_;  <span class="hljs-comment">// 头插法</span><br>        firstSlot_ = <span class="hljs-built_in">reinterpret_cast</span>&lt;Slot*&gt;(newblock); <br><br>        <span class="hljs-type">char</span>* body = <span class="hljs-built_in">reinterpret_cast</span>&lt;<span class="hljs-type">char</span>*&gt;(newblock) + <span class="hljs-built_in">sizeof</span>(Slot*);   <span class="hljs-comment">// newblock 开始的位置存储了一个Slot*  就是next</span><br>        <span class="hljs-type">size_t</span> paddingSize = <span class="hljs-built_in">paddpoint</span>(body, Slotsize_);  <span class="hljs-comment">// 内存对齐</span><br>        curSlot_ = <span class="hljs-built_in">reinterpret_cast</span>&lt;Slot*&gt;(body+paddingSize); <span class="hljs-comment">// 对照allocate()可发现最后一个slot不会被使用！！</span><br><br>        lastSlot_ = <span class="hljs-built_in">reinterpret_cast</span>&lt;Slot*&gt;(<span class="hljs-built_in">reinterpret_cast</span>&lt;<span class="hljs-type">size_t</span>&gt;(newblock) + Blocksize_ - Slotsize_ <span class="hljs-number">+1</span>);  <span class="hljs-comment">// 这是在找最后一个Slot</span><br><br>        freelist_ = <span class="hljs-literal">nullptr</span>;<br>    &#125;<br><br></code></pre></td></tr></table></figure><h2 id="v2-与-v3"><a href="#v2-与-v3" class="headerlink" title="v2 与 v3"></a>v2 与 v3</h2><p>v2 v3的区别十分的小，只是多了个一个变量 batchnum ，这个变量会使在分配的时候，往往比原先多分配几个内存块给threadcache</p><p>下面以一个内存块的角度大致去梳理了下v2 v3 ，这两个版本的框架都是一致的。</p><p>！<a href="../images/memorypoolv2v3.png">版本2-3</a></p><p>框架的理解比较简单，但是具体的实现就会有许多的疑问，这个得多思考多梳理。</p><p>目前，内存池的这三个实现依旧可以发现一些问题：</p><ul><li>代码中函数的参数统一<ul><li>传入的参数 有的size 有的index，其实完全可以在函数内部进行转换，统一为size</li></ul></li><li>命名规范</li><li>代码的逻辑上仍然不足<ul><li>内存对齐 以避免 跨行读取 提高性能 但是实现中的内存对齐并不一定能做到 地址对齐 </li><li>一些代码实现会导致内存泄露问题</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>projects</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>版本控制</title>
    <link href="/2025/03/26/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/"/>
    <url>/2025/03/26/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<h2 id="基本命令-流程"><a href="#基本命令-流程" class="headerlink" title="基本命令-流程"></a>基本命令-流程</h2><p>针对每个lab，创建一个对应的test分支<br>例如 util util_test</p><p>在test分支上进行每个作业的提交</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs stata">git add .<br>git commit -<span class="hljs-keyword">m</span> <span class="hljs-string">&quot;labX-XX&quot;</span><br><br>git checkout util<br>git <span class="hljs-keyword">merge</span> util_test  <span class="hljs-comment">// 这样的合并是 fast forward 合并 不会保留明确的历史记录 </span><br><br>git <span class="hljs-keyword">merge</span> --<span class="hljs-keyword">no</span>-ff util_test -<span class="hljs-keyword">m</span> <span class="hljs-string">&quot;合并信息&quot;</span> <span class="hljs-comment">//如果不加 -m 就会进入编辑器 得在第一行输入合并信息 ^+O 保存 -&gt; 输入合并信息文件名 -&gt; ^+X 退出</span><br><br><br>git push &lt;仓库&gt; &lt;util&gt;:&lt;util&gt;<br><br></code></pre></td></tr></table></figure><p>切换 lab</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs gauss">git fetch   <span class="hljs-meta"># 同步远程仓库，但不自动更新本地仓库 ，可以在本地看到remote的变化 再做决定是否要更新本地仓库 </span><br>            <span class="hljs-meta"># 如果是git pull 则会自动更新合并本地仓库</span><br>            <span class="hljs-meta"># 不想更新直接忽略即可</span><br>            <br>git checkout &lt;lab-branch-name&gt;<br><br><span class="hljs-built_in">make</span> clean<br><br></code></pre></td></tr></table></figure><p><code>git fetch 后的操作如下</code></p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">git log <span class="hljs-keyword">origin/main </span> <span class="hljs-comment"># 查看远程 main 分支的提交历史</span><br>git log HEAD..<span class="hljs-keyword">origin/main </span> <span class="hljs-comment"># 只看本地未拉取的远程提交（HEAD是本地当前分支的指针）</span><br><br>git <span class="hljs-keyword">diff </span>main <span class="hljs-keyword">origin/main </span> <span class="hljs-comment"># 比较本地 main 和远程 origin/main 的代码差异</span><br>git remote <span class="hljs-keyword">show </span><span class="hljs-keyword">origin </span> <span class="hljs-comment"># 显示远程仓库的详细信息（分支状态、跟踪关系等）</span><br><br>git fetch <span class="hljs-keyword">origin </span>        <span class="hljs-comment"># 下载远程更新</span><br>git merge <span class="hljs-keyword">origin/main </span>   <span class="hljs-comment"># 将远程 origin/main 合并到当前本地分支</span><br><br>git fetch <span class="hljs-keyword">origin</span><br><span class="hljs-keyword"></span>git rebase <span class="hljs-keyword">origin/main </span>  <span class="hljs-comment"># 将本地提交“变基”到远程更新之后（保持提交历史线性）</span><br><br></code></pre></td></tr></table></figure><p><code>merge  rebase</code>的区别</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs livescript">rebase 是变基 ，就是逐提交的将当前分支 的提交 “重放到” 变到的 分支 最新提交的后面<br><br>A -&gt; B -&gt; C  main       ---&gt;  A -&gt; B -&gt; C -&gt; D<span class="hljs-string">&#x27; -&gt; E&#x27;</span>  main<br>  <span class="hljs-string">\_</span> D -&gt; E  <span class="hljs-keyword">function</span>   ---&gt; <br><br>                     rebase <br><br>merge 则是产生一个合并节点<br><br>A -&gt; B -&gt; C  main       ---&gt;  A -&gt; B -&gt; C -&gt; F  main<br>  <span class="hljs-string">\_</span> D -&gt; E  <span class="hljs-keyword">function</span>   ---&gt;    <span class="hljs-string">\_</span> D -&gt; E _/    <span class="hljs-keyword">function</span><br><br>                     merge <br><br></code></pre></td></tr></table></figure><p>有时实验debug很久解决不了，需要对照下参考，此时可以使用<code>git stash</code></p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">git stash save <span class="hljs-string">&quot;修改的名字&quot;</span> <span class="hljs-comment"># stash是全局的 临时保存</span><br>                           <span class="hljs-comment"># 临时不是只能短时间内 ，而是与一般的add commit不同</span><br><br>git stash pop  <span class="hljs-comment"># 弹出最近压入的修改 --- 恢复该修改 ，并删除stash</span><br><br>git stash apply stash<span class="hljs-meta">@&#123;X&#125;</span>  <span class="hljs-comment"># 恢复指定的修改，保留stash</span><br><br>git stash list  <span class="hljs-comment"># 列出所有的stash</span><br><br>git stash drop stash<span class="hljs-meta">@&#123;X&#125;</span>  <span class="hljs-comment"># 删除指定的stash 不恢复</span><br><br>git stash clear  <span class="hljs-comment"># 清空所有的stash</span><br><br>git stash branch <span class="hljs-variable">&lt;new-branch-name&gt;</span> stash<span class="hljs-meta">@&#123;X&#125;</span>  <span class="hljs-comment"># 创建新分支 并应用指定的stash并删除</span><br><br><br></code></pre></td></tr></table></figure><h2 id="问题-疑惑"><a href="#问题-疑惑" class="headerlink" title="问题&amp;疑惑"></a>问题&amp;疑惑</h2><ol><li>为什么在合并后的文件中不需要重新commit？</li></ol><p>无冲突的情况下 ，要么实际是直接移动指针 ，要么就是会自动在合并后提交</p><p>​场景​是否需要手动提交？​原因<br>快进合并❌ 不需要Git 直接移动分支指针，无新提交。<br>无冲突的非快进合并❌ 不需要Git 自动生成合并提交（除非使用 –squash）。<br>合并冲突✅ 需要需手动解决冲突后提交。<br>使用 –no-commit✅ 需要强制 Git 暂停合并，允许检查或修改后手动提交。<br>合并后修改提交内容✅ 需要通过 git commit –amend 或新增提交补充内容。</p><ol start="2"><li>fast forward 是什么？</li></ol><p>fast forward 意味着直接移动指针 而不是生成合并提交</p><pre><code class="hljs">                second_brach                 |                 +            E &lt;- F            |            +</code></pre><p>A &lt;- B &lt;- C &lt;-  D<br>                +<br>                |<br>                target,HEAD</p><p><code>git merge second_branch</code> 的作用 会是如下效果（在目标分支target没有新的提交的时候）</p><p>A &lt;- B &lt;- C &lt;-  D &lt;- E &lt;- F<br>                          +<br>                          |<br>                          target,second_branch,HEAD</p><p>大写字母对应一次提交</p><ol start="3"><li>git merge 加上 –no-ff有什么作用？</li></ol><p>** –no-ff 的作用**</p><ul><li>​默认合并行为（无 –no-ff）​<br>​快进合并（Fast-Forward）​：<br>如果目标分支（例如 main）是待合并分支（例如 feature）的直接祖先（即没有其他提交干扰），Git 会直接移动 main 的指针到 feature 的最新提交，​不会生成合并提交。<br>​结果：分支历史保持线性，但丢失分支的存在痕迹。</li><li>​使用 –no-ff 后的行为<br>​强制生成合并提交：<br>即使可以快进，Git 也会创建一个新的合并提交，保留两个分支的历史记录。<br>​结果：分支历史中明确体现合并点，方便追踪分支的独立开发过程。</li></ul><ol start="4"><li>如果是target分支上，已经有了修改但是尚未暂存（add）没有提交（commit），那么直接git merge 会怎样？</li></ol><p>默认情况下：</p><ul><li>​拒绝合并<br>Git 会检测到工作目录或暂存区存在未提交的修改，并立即终止合并操作，提示错误信息：</li></ul><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs subunit"><span class="hljs-keyword">error: </span>Your local changes to the following files would be overwritten by merge:<br>    &lt;file-name&gt;<br>Please commit your changes or stash them before you merge.<br>Aborting<br></code></pre></td></tr></table></figure><p>​原因：Git 需要确保合并操作不会覆盖未保存的修改，否则可能导致数据丢失或冲突难以处理。</p><ul><li>​工作目录保持原状<br>你的未提交修改不会被清除，分支状态也不会改变，需手动处理这些改动。</li></ul><p>所以如果是有了修改就必须要么放弃修改，要么先提交</p><p>因此，<code>git merge</code>的前提是HEAD所在分支一定不能有任何的修改，即便未暂存的修改</p>]]></content>
    
    
    <categories>
      
      <category>techniques</category>
      
      <category>os</category>
      
    </categories>
    
    
    <tags>
      
      <tag>os</tag>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vim学习</title>
    <link href="/2025/03/09/vim%E5%AD%A6%E4%B9%A0/"/>
    <url>/2025/03/09/vim%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h1><p>看大佬的学习笔记：</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">https:</span>//wsdjeg.net/vim-galore-<span class="hljs-built_in">zh</span>-cn/<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>techniques</category>
      
      <category>vim</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>环境配置</title>
    <link href="/2025/03/07/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    <url>/2025/03/07/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="xv6-labs-2020"><a href="#xv6-labs-2020" class="headerlink" title="xv6-labs-2020"></a>xv6-labs-2020</h1><p>跟随的是卡哥星球上的指导，这里是对本项目的环境配置的一个记录，也对工具使用进行记录，以便查阅</p><h3 id="git"><a href="#git" class="headerlink" title="git"></a>git</h3><p>注意本项目的远程是有两个的：</p><ul><li>最开始的 origin 仓库，就是xv6-labs-2020的原始仓库</li><li>一个是自己代码提交的仓库，文档指引命名为 github</li></ul><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><code class="hljs pf"><span class="hljs-comment"># git 环境配置</span><br><br>git config --global <span class="hljs-keyword">user</span>.name <span class="hljs-string">&quot;XXXX&quot;</span>             <span class="hljs-comment"># 配置账户名</span><br>git config --global <span class="hljs-keyword">user</span>.email <span class="hljs-string">&quot;123@example.com&quot;</span> <span class="hljs-comment"># 配置邮箱</span><br><br><span class="hljs-comment"># 如果试图向仓库进行提交，一定要先设置 ssh </span><br><span class="hljs-comment"># 直接进行git push github util : util 会要求输密码</span><br><br><br><span class="hljs-comment"># 这里使用的是ED25519算法，也可以使用rsa版的</span><br><br>ssh-keygen -t ed25519 -C <span class="hljs-string">&quot;your_email@example.com&quot;</span> <span class="hljs-comment"># 生成密钥</span><br><br>cat ~/.ssh/id_ed25519.pub  <span class="hljs-comment"># 查看公钥内容</span><br><br>ssh -T git@github.com   <span class="hljs-comment"># 查看连接是否建立</span><br><br><br><span class="hljs-comment"># 配置信息处理</span><br>cat .git/config  <span class="hljs-comment"># 查看本地仓库的git配置文件</span><br><br><span class="hljs-comment"># 查看当前仓库的 Git 配置</span><br>git config --local --list<br><br><span class="hljs-comment"># 备份全局配置（默认在用户主目录）</span><br>cp ~/.gitconfig ~/.gitconfig.backup<br><br><span class="hljs-comment"># 清除全局用户名和邮箱（如果之前配置过）</span><br>git config --global --unset <span class="hljs-keyword">user</span>.name<br>git config --global --unset <span class="hljs-keyword">user</span>.email<br><br><span class="hljs-comment"># 清除 Git 凭据缓存（避免自动登录旧账号）</span><br>git config --global --unset credential.helper<br><br><br><span class="hljs-comment"># 删除旧的 origin 关联 </span><br>git remote remove origin<br><br><span class="hljs-comment"># 删除远程 dev 分支</span><br>git push origin --delete dev<br><br><span class="hljs-comment"># 重命名当前分支</span><br>git branch -m <span class="hljs-variable">&lt;new-branch-name&gt;</span>  <br><br><span class="hljs-comment"># 重命名目标分支（如将 old-branch 改为 new-branch）</span><br>git branch -m old-branch new-branch<br><br>git branch -a    <span class="hljs-comment"># 展示目前所有的分支 包括本地和远程 </span><br><br>git branch   <span class="hljs-comment"># 列出当前的分支 *标记当前分支</span><br><br>git status   <span class="hljs-comment"># 显示当前的仓库的状态  第一行包含当前分支信息</span><br><br>git clone http://仓库地址   <span class="hljs-comment"># 克隆仓库</span><br><br>git remote -v <span class="hljs-comment"># 查看远程主机名和仓库连接</span><br><br>git remote set-url <span class="hljs-variable">&lt;仓库名&gt;</span> <span class="hljs-variable">&lt;新url&gt;</span>  <span class="hljs-comment"># 重新设置仓库的远程地址</span><br><br>git remote add <span class="hljs-variable">&lt;自己取个远程主机名&gt;</span> <span class="hljs-variable">&lt;仓库地址&gt;</span>  <span class="hljs-comment"># 添加一个远程仓库</span><br><br>git push <span class="hljs-variable">&lt;远程主机名&gt;</span> <span class="hljs-variable">&lt;本地分支名&gt;</span> : <span class="hljs-variable">&lt;远程分支名&gt;</span> <span class="hljs-comment"># 这里的远程主机名是当时建立连接的时候自己取的   如果这里的分支名相同，则:及之后的可以省略</span><br><span class="hljs-comment"># 将本地仓库的修改push，推送到远程仓库</span><br><br><br>git checkout util <span class="hljs-comment"># 将分支切换到util </span><br><br><br>git branch <span class="hljs-variable">&lt;分支名&gt;</span>  <span class="hljs-comment"># 创建分支</span><br><br>git checkout -b <span class="hljs-variable">&lt;分支名&gt;</span>  <span class="hljs-comment">#创建分支并切换到该分支</span><br><br>git add .  <span class="hljs-comment"># 添加当前目录及子目录的所有修改</span><br><br>git add <span class="hljs-variable">&lt;filename1&gt;</span>  <span class="hljs-comment"># 精准添加单个文件，如果未跟踪将开始跟踪，且都转为暂存状态</span><br><br>git add <span class="hljs-variable">&lt;f1&gt;</span> <span class="hljs-variable">&lt;f2&gt;</span>  <span class="hljs-comment"># 精准添加多个文件</span><br><br>git add -A <span class="hljs-comment"># 添加整个仓库所有修改 ，包括删除操作</span><br><br>git add -p <span class="hljs-comment"># 逐个检查修改片段，选择是否添加</span><br><br>git rm <span class="hljs-variable">&lt;f1&gt;</span> <span class="hljs-comment"># 删除文件f1，取消跟踪</span><br><br>git rm --cache <span class="hljs-variable">&lt;f1&gt;</span> <span class="hljs-comment"># 保留文件，并取消跟踪</span><br><br>git init  <span class="hljs-comment"># 初始化仓库</span><br><br><br>git commit <span class="hljs-comment"># 提交修改，但是仍在本地  默认打包提交所有已暂存的所有内容  如果不跟名字，将会进入编辑器状态</span><br><br>git commit -m <span class="hljs-string">&quot;本次提交信息&quot;</span>  <span class="hljs-comment"># 直接在命令行中完成本次信息，无需进入编辑器</span><br><br>git commit -a -m <span class="hljs-string">&quot;信息&quot;</span>  <span class="hljs-comment"># 自动暂存所有**已跟踪文件**的修改，并提交  也就是自动完成了 git add 但是记得要先跟踪！！！</span><br><br>git merge <span class="hljs-variable">&lt;分支名1&gt;</span>  <span class="hljs-comment"># 合并当前head所在分支与该分支1</span><br><br><br>git push -u <span class="hljs-variable">&lt;主机名&gt;</span> <span class="hljs-variable">&lt;分支&gt;</span>   <span class="hljs-comment"># -u 会建立 追踪关系 ，让本地仓库和远程的&lt;origin&gt; 的main分支建立关系！！</span><br><br>git pull <span class="hljs-variable">&lt;主机名&gt;</span> <span class="hljs-variable">&lt;分支名&gt;</span>   <span class="hljs-comment"># 将 远程仓库的分支 拉取到仓库与当前分支合并  </span><br><br>git pull  <span class="hljs-comment"># 如果已经跟踪了仓库， 则直接拉取就行！！</span><br><br>git config --global core.editor   <span class="hljs-comment"># 查看当前git默认的编辑器，该代码有些情况下不生效</span><br><br><br>git rm --cached <span class="hljs-variable">&lt;your-file&gt;</span>  <span class="hljs-comment"># 移除仓库中（本地的）文件追踪但保留</span><br><br>.gitignore  <span class="hljs-comment"># 写.gitignore文件可以 让仓库中的某些文件不被上传 内容是放入 想要忽略的文件的路径（含文件）</span><br><br><br><br></code></pre></td></tr></table></figure><p>如果直接<code>git commit</code>会进入编辑器</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-comment"># 如果是vim</span><br>esc <span class="hljs-comment"># 先推出到查阅模式</span><br><br><span class="hljs-symbol">:wq</span> enter <span class="hljs-comment"># 键入后回车，这是保存再退出</span><br><br><span class="hljs-symbol">:q!</span> enter <span class="hljs-comment"># 放弃更改退出</span><br><br><br><span class="hljs-comment"># 如果是Nano</span><br><br><span class="hljs-title class_">CTRL</span> + O  <span class="hljs-comment"># 保存 并 编辑文件信息</span><br><br><span class="hljs-title class_">CTRL</span> + X  <span class="hljs-comment"># 退出</span><br><br><span class="hljs-title class_">CTRL</span> + X  N  <span class="hljs-comment"># 在保存时按N则不保存退出！</span><br><br><br><br><br></code></pre></td></tr></table></figure><h3 id="make"><a href="#make" class="headerlink" title="make"></a>make</h3><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs gauss"><span class="hljs-meta"># 再完成文件修改后，记得先将之前编译的文件先清理掉，再重新编译</span><br><br><span class="hljs-built_in">make</span> clean  <span class="hljs-meta"># 清楚之前的编译文件</span><br><br><br>ctrl + A  然后再按  X <br><br><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>techniques</category>
      
      <category>os</category>
      
    </categories>
    
    
    <tags>
      
      <tag>os</tag>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>selenium脚本初始化</title>
    <link href="/2025/03/06/selenium%E8%84%9A%E6%9C%AC%E5%88%9D%E5%A7%8B%E5%8C%96/"/>
    <url>/2025/03/06/selenium%E8%84%9A%E6%9C%AC%E5%88%9D%E5%A7%8B%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h1 id="selenium-控制浏览器"><a href="#selenium-控制浏览器" class="headerlink" title="selenium 控制浏览器"></a>selenium 控制浏览器</h1><p>需要现在本地终端打开浏览器的调试模式</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 以Edge浏览器为例</span><br><span class="hljs-string">./msedge.exe</span>  <span class="hljs-string">--remote-debugging-port</span> <span class="hljs-string">=</span> <span class="hljs-number">9222</span><br><br><span class="hljs-comment"># 这里的端口号只要是没有被占用的都可以</span><br><span class="hljs-comment"># 注意需要在浏览器对应的目录下才可以</span><br><br><span class="hljs-string">netstat</span> <span class="hljs-string">-aon</span> <span class="hljs-string">|</span> <span class="hljs-attr">findstr :</span> <span class="hljs-number">9222</span><br><span class="hljs-comment"># 查看该端口是否被占用，占用会出现含listen的语句 </span><br></code></pre></td></tr></table></figure><p>然后在程序中执行以下代码，查看是否浏览器按预定执行</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">from</span> selenium <span class="hljs-keyword">import</span> webdriver<br><span class="hljs-keyword">from</span> seleniumwwebdriver.Edge.<span class="hljs-keyword">options</span> <span class="hljs-keyword">import</span> <span class="hljs-keyword">Options</span><br><br>web_option = <span class="hljs-keyword">Options</span>()<br>web_option.add_experimental_option(&quot;debuggerAddress&quot;, &quot;127.0.0.1 : 9222&quot;)<br><br>driver = webdriver.Edge(<span class="hljs-keyword">options</span> = web_option)<br>driver.<span class="hljs-keyword">get</span>(url)<br><br># &quot;执行体&quot;<br><br>driver.quit()<br><br></code></pre></td></tr></table></figure><p><em>以上代码，暂时无法在我的电脑本地执行成功，会出现两种报错：</em><br><em>“ target window already closed “ 错误</em><br><em>“ session not created ···  not reachable “ 错误</em></p>]]></content>
    
    
    <categories>
      
      <category>techniques</category>
      
      <category>python</category>
      
      <category>selenium</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo + fluid 使用指南</title>
    <link href="/2025/03/03/%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/"/>
    <url>/2025/03/03/%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/</url>
    
    <content type="html"><![CDATA[<div class="note note-success">            <p>访问fluid用户手册：<br><code>https://hexo.fluid-dev.com/docs/guide/#%E5%85%B3%E4%BA%8E%E6%8C%87%E5%8D%97</code></p>          </div><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
